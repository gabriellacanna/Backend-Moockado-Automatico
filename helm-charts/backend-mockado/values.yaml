# Backend Mockado Automático - Helm Values
# Configurações para deployment em produção

global:
  # Configurações globais
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  
# Configurações do Collector Service
collector:
  enabled: true
  
  image:
    registry: docker.io
    repository: backend-mockado/collector
    tag: "1.0.0"
    pullPolicy: IfNotPresent
    pullSecrets: []
  
  replicaCount: 2
  
  # Configurações de recursos
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  # Configurações de autoscaling
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  # Configurações de rede
  service:
    type: ClusterIP
    ports:
      http: 9090
      grpc: 50051
      metrics: 9091
    annotations: {}
  
  # Configurações de ingress
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts: []
    tls: []
  
  # Configurações específicas da aplicação
  config:
    logLevel: "INFO"
    bodySizeLimit: 8192
    enableSampling: false
    defaultSampleRate: 1.0
    dedupTtl: 3600
    batchSize: 10
    batchTimeout: 5
    maxConcurrentRequests: 100
    enableMetrics: true
  
  # Configurações de segurança
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
  
  # Configurações de health checks
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  # Volumes e persistent storage
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 10Gi
    annotations: {}
  
  # Node selector e tolerations
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 1

# Configurações do WireMock Loader Service
wireMockLoader:
  enabled: true
  
  image:
    registry: docker.io
    repository: backend-mockado/wiremock-loader
    tag: "1.0.0"
    pullPolicy: IfNotPresent
    pullSecrets: []
  
  replicaCount: 2
  
  # Configurações de recursos
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  # Configurações de autoscaling
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 5
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  # Configurações de rede
  service:
    type: ClusterIP
    ports:
      http: 8090
      metrics: 8091
    annotations: {}
  
  # Configurações específicas da aplicação
  config:
    logLevel: "INFO"
    batchSize: 5
    batchTimeout: 10
    maxConcurrentRequests: 10
    validateMappings: true
    skipInvalidMappings: true
    backupMappings: true
    backupRetentionDays: 7
    enableMetrics: true
  
  # Configurações de segurança
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false
  
  # Configurações de health checks
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  # Volumes e persistent storage
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 5Gi
    annotations: {}
  
  # Node selector e tolerations
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 1

# Configurações do WireMock
wiremock:
  enabled: true
  
  image:
    registry: docker.io
    repository: wiremock/wiremock
    tag: "latest"
    pullPolicy: IfNotPresent
  
  replicaCount: 2
  
  # Configurações de recursos
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  # Configurações de rede
  service:
    type: ClusterIP
    port: 8080
    annotations: {}
  
  # Configurações de ingress
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts: []
    tls: []
  
  # Configurações específicas do WireMock
  config:
    globalResponseTemplating: true
    verbose: true
    maxRequestJournalEntries: 1000
  
  # Configurações de segurança
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: false
    allowPrivilegeEscalation: false
  
  # Volumes para mappings
  persistence:
    enabled: true
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 5Gi
    annotations: {}
  
  # Node selector e tolerations
  nodeSelector: {}
  tolerations: []
  affinity: {}

# Configurações do Redis
redis:
  enabled: true
  
  # Configurações de autenticação
  auth:
    enabled: true
    password: ""
    existingSecret: ""
    existingSecretPasswordKey: ""
  
  # Configurações de arquitetura
  architecture: standalone
  
  # Configurações do master
  master:
    persistence:
      enabled: true
      storageClass: ""
      size: 8Gi
    
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
  
  # Configurações de métricas
  metrics:
    enabled: true
    serviceMonitor:
      enabled: false

# Configurações dos EnvoyFilters
envoyFilters:
  enabled: true
  
  # Aplicação global ou por namespace
  global: false
  
  # Namespaces onde aplicar os filtros
  namespaces:
    - production
    - staging
  
  # Configurações do tap filter
  tapFilter:
    # Sampling rate (0.0 a 1.0)
    sampleRate: 1.0
    
    # Tamanho máximo do buffer
    bufferSizeBytes: 16384
    
    # Timeout do flush
    flushTimeout: "1s"
    
    # Filtros de matching
    matching:
      methods:
        - GET
        - POST
        - PUT
        - DELETE
        - PATCH
      
      pathPatterns:
        - "^/(api|v[0-9]+)/.*"
        - "^/graphql$"
      
      excludePaths:
        - "/health.*"
        - "/metrics.*"
        - "/ready.*"
        - "/live.*"
        - "/favicon.ico"

# Configurações de monitoramento
monitoring:
  enabled: true
  
  # Prometheus ServiceMonitor
  serviceMonitor:
    enabled: true
    namespace: ""
    labels: {}
    interval: 30s
    scrapeTimeout: 10s
  
  # Grafana Dashboard
  grafanaDashboard:
    enabled: true
    namespace: ""
    labels: {}
  
  # Alerting rules
  prometheusRule:
    enabled: true
    namespace: ""
    labels: {}
    rules:
      - alert: BackendMockadoCollectorDown
        expr: up{job="backend-mockado-collector"} == 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Backend Mockado Collector is down"
          description: "Backend Mockado Collector has been down for more than 5 minutes"
      
      - alert: BackendMockadoHighErrorRate
        expr: rate(collector_requests_errors_total[5m]) > 0.1
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High error rate in Backend Mockado"
          description: "Error rate is {{ $value }} errors per second"

# Configurações de segurança
security:
  # Network Policies
  networkPolicy:
    enabled: true
    ingress: []
    egress: []
  
  # Pod Security Standards
  podSecurityStandards:
    enforce: "restricted"
    audit: "restricted"
    warn: "restricted"
  
  # Service Account
  serviceAccount:
    create: true
    annotations: {}
    name: ""
    automountServiceAccountToken: false

# Configurações de namespace
namespaceOverride: ""

# Labels e annotations comuns
commonLabels: {}
commonAnnotations: {}

# Configurações de teste
tests:
  enabled: true
  image:
    registry: docker.io
    repository: curlimages/curl
    tag: "latest"